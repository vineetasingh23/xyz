private static final String[] NEW_HEADERS = {
    "Tenant ID", "Tenant Name", "Cost Center", "Service", "Processor ID", 
    "Processor Name", "Processor Type", "Model Name", "Usage Units", 
    "Number of Documents", "Input Token", "Output Token"
};private void buildConsolidatedSheet(Sheet sheet, Workbook workbook, 
Map<String, Object> usageData, 
String tenantId, 
Map<String, String> tenantDetails) {
int rownum = 0;
Row row = sheet.createRow(rownum);

// Create header styles
XSSFFont font = ((XSSFWorkbook) workbook).createFont();
font.setFontName(FONT_NAME);
font.setFontHeightInPoints((short) 11);
font.setBold(true);

CellStyle headerStyle = workbook.createCellStyle();
headerStyle.setFillForegroundColor(IndexedColors.LIGHT_YELLOW.getIndex());
headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
headerStyle.setFont(font);

// Set headers
Cell headerCell = null;
for (int i = 0; i < NEW_HEADERS.length; i++) {
headerCell = row.createCell(i);
headerCell.setCellValue(NEW_HEADERS[i]);
headerCell.setCellStyle(headerStyle);
sheet.setColumnWidth(i, 20 * 256);
}

rownum++;

String tenantName = tenantDetails.getOrDefault("name", "");
String costCenter = tenantDetails.getOrDefault("costCenter", "");

// Process OCR services
addServiceRows(sheet, workbook, rownum, "OCR", 
(Map<String, Object>)usageData.get("Inhouse OCR"), 
(Map<String, Object>)usageData.get("INHOUSE_OCR_DOCUMENT_COUNT"),
tenantId, tenantName, costCenter);

// Add rows for Document Splitter
rownum = sheet.getLastRowNum() + 1;
addServiceRows(sheet, workbook, rownum, "Document Splitter",
(Map<String, Object>)usageData.get("Document Splitter"),
(Map<String, Object>)usageData.get("DOC_SPLITTER_DOCUMENT_COUNT"),
tenantId, tenantName, costCenter);

// Add rows for Document AI
rownum = sheet.getLastRowNum() + 1;
addDocAIRows(sheet, workbook, rownum, 
(Map<String, Object>)usageData.get("Document AI"),
tenantId, tenantName, costCenter);

// Add rows for Gemini
if (usageData.containsKey("Gemini")) {
rownum = sheet.getLastRowNum() + 1;
addGeminiRows(sheet, workbook, rownum, 
(Map<String, Object>)usageData.get("Gemini"),
tenantId, tenantName, costCenter);
}

// Set auto filter for the entire table
sheet.setAutoFilter(new CellRangeAddress(0, sheet.getLastRowNum(), 0, NEW_HEADERS.length - 1));
}


private int addServiceRows(Sheet sheet, Workbook workbook, int startRow,
                          String serviceName, Map<String, Object> usageData,
                          Map<String, Object> documentCountData,
                          String tenantId, String tenantName, String costCenter) {
    int rownum = startRow;
    CellStyle style = workbook.createCellStyle();
    
    for (String key : usageData.keySet()) {
        if (key.equals("Total")) continue; // Skip totals for individual entries
        
        Row row = sheet.createRow(rownum);
        
        // Tenant info
        row.createCell(0).setCellValue(tenantId);
        row.createCell(1).setCellValue(tenantName);
        row.createCell(2).setCellValue(costCenter);
        
        // Service info
        row.createCell(3).setCellValue(serviceName);
        row.createCell(4).setCellValue(""); // No processor ID for basic services
        row.createCell(5).setCellValue(key); // Service name as processor name
        row.createCell(6).setCellValue(""); // No processor type for basic services
        row.createCell(7).setCellValue(""); // No model name for basic services
        
        // Usage data
        Long usageUnits = (Long) usageData.getOrDefault(key, 0L);
        Long docCount = (Long) documentCountData.getOrDefault(key, 0L);
        
        row.createCell(8).setCellValue(usageUnits);
        row.createCell(9).setCellValue(docCount);
        row.createCell(10).setCellValue(0); // No tokens for basic services
        row.createCell(11).setCellValue(0); // No tokens for basic services
        
        rownum++;
    }
    
    return rownum;
}

private int addDocAIRows(Sheet sheet, Workbook workbook, int startRow,
                        Map<String, Object> docAIData,
                        String tenantId, String tenantName, String costCenter) {
    int rownum = startRow;
    CellStyle style = workbook.createCellStyle();
    
    for (String processorName : docAIData.keySet()) {
        if (processorName.equalsIgnoreCase("Total") || processorName.equalsIgnoreCase("Total_Docs")) {
            continue; // Skip totals
        }
        
        Row row = sheet.createRow(rownum);
        Map<String, Object> processorDetails = (Map<String, Object>) docAIData.get(processorName);
        
        // Tenant info
        row.createCell(0).setCellValue(tenantId);
        row.createCell(1).setCellValue(tenantName);
        row.createCell(2).setCellValue(costCenter);
        
        // Service info
        row.createCell(3).setCellValue("Document AI");
        row.createCell(4).setCellValue((String) processorDetails.get("processor_Id"));
        row.createCell(5).setCellValue(processorName);
        row.createCell(6).setCellValue((String) processorDetails.get("processor_Type"));
        row.createCell(7).setCellValue(""); // No model name for Doc AI
        
        // Usage data
        row.createCell(8).setCellValue((Long) processorDetails.get("usage_Units"));
        row.createCell(9).setCellValue((Long) processorDetails.get("number_Of_Document"));
        row.createCell(10).setCellValue(0); // No tokens for Doc AI
        row.createCell(11).setCellValue(0); // No tokens for Doc AI
        
        rownum++;
    }
    
    return rownum;
}

private int addGeminiRows(Sheet sheet, Workbook workbook, int startRow,
                         Map<String, Object> geminiData,
                         String tenantId, String tenantName, String costCenter) {
    int rownum = startRow;
    CellStyle style = workbook.createCellStyle();
    
    // Process processor-based usage
    Map<String, Object> processorData = (Map<String, Object>) geminiData.get("processor");
    for (String processorName : processorData.keySet()) {
        if (processorName.equalsIgnoreCase("Total")) {
            continue; // Skip totals
        }
        
        Row row = sheet.createRow(rownum);
        Map<String, Long> details = (Map<String, Long>) processorData.get(processorName);
        
        // Tenant info
        row.createCell(0).setCellValue(tenantId);
        row.createCell(1).setCellValue(tenantName);
        row.createCell(2).setCellValue(costCenter);
        
        // Service info
        row.createCell(3).setCellValue("Gemini");
        row.createCell(4).setCellValue(""); // No processor ID for Gemini
        row.createCell(5).setCellValue(processorName);
        row.createCell(6).setCellValue(""); // No processor type for Gemini
        row.createCell(7).setCellValue(""); // Will be populated in model section
        
        // Usage data
        Long totalUsage = details.get("input_token") + details.get("output_token");
        row.createCell(8).setCellValue(totalUsage);
        row.createCell(9).setCellValue(0); // No document count for tokens
        row.createCell(10).setCellValue(details.get("input_token"));
        row.createCell(11).setCellValue(details.get("output_token"));
        
        rownum++;
    }
    
    // Process model-based usage
    Map<String, Object> modelData = (Map<String, Object>) geminiData.get("model");
    for (String modelName : modelData.keySet()) {
        if (modelName.equalsIgnoreCase("Total")) {
            continue; // Skip totals
        }
        
        Row row = sheet.createRow(rownum);
        Map<String, Long> details = (Map<String, Long>) modelData.get(modelName);
        
        // Tenant info
        row.createCell(0).setCellValue(tenantId);
        row.createCell(1).setCellValue(tenantName);
        row.createCell(2).setCellValue(costCenter);
        
        // Service info
        row.createCell(3).setCellValue("Gemini");
        row.createCell(4).setCellValue(""); // No processor ID for models 
        row.createCell(5).setCellValue(""); // No processor name for models
        row.createCell(6).setCellValue(""); // No processor type for models
        row.createCell(7).setCellValue(modelName);
        
        // Usage data
        Long totalUsage = details.get("input_token") + details.get("output_token");
        row.createCell(8).setCellValue(totalUsage);
        row.createCell(9).setCellValue(0); // No document count for tokens
        row.createCell(10).setCellValue(details.get("input_token"));
        row.createCell(11).setCellValue(details.get("output_token"));
        
        rownum++;
    }
    
    return rownum;
}



public byte[] createExcelForSingleTenant(Map<String, Object> totalUsage, 
                                       List<Map<String, Object>> monthlyUsageList, 
                                       String tenantId, 
                                       Map<String, String> tenantDetails) throws IOException {
    Workbook workbook = new XSSFWorkbook();
    
    // Create tenant info sheet
    Sheet tenantInfoSheet = workbook.createSheet("Tenant Info");
    buildTenantInfoSheet(tenantInfoSheet, workbook, tenantDetails);
    
    // Create total usage sheet in consolidated format
    Sheet totalSheet = workbook.createSheet("Total Usage");
    buildConsolidatedSheet(totalSheet, workbook, totalUsage, tenantId, tenantDetails);
    
    // Create monthly sheets in consolidated format
    for (int i = 0; i < monthlyUsageList.size(); i++) {
        Map<String, Object> monthlyUsage = monthlyUsageList.get(i);
        String sheetName = (String) monthlyUsage.get(MONTH);
        Sheet monthlySheet = workbook.createSheet(sheetName);
        buildConsolidatedSheet(monthlySheet, workbook, monthlyUsage, tenantId, tenantDetails);
    }
    
    // Generate output
    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
    workbook.write(outputStream);
    byte[] bytes = outputStream.toByteArray();
    workbook.close();
    
    return bytes;
}

public void createExcelForAllTenants(Sheet sheet, Workbook workbook, 
                                   Map<String, Object> totalUsage, 
                                   Map<String, Object> monthlyUsage, 
                                   String tenantId, 
                                   Map<String, String> tenantDetails) throws IOException {
    // Use the consolidated format for all tenants
    buildConsolidatedSheet(sheet, workbook, 
                         totalUsage != null ? totalUsage : monthlyUsage, 
                         tenantId, tenantDetails);
    
    // Set filter for the sheet
    sheet.setAutoFilter(new CellRangeAddress(0, sheet.getLastRowNum(), 0, NEW_HEADERS.length - 1));
}
